@import url("./variables.css");

:host {
  position: relative;
  display: block;

  --oe-annotation-color: green;
  --oe-annotation-font-color: white;
  --oe-annotation-selected-color: lightgreen;
  --oe-annotation-weight: 1px;
}

#wrapper-element {
  position: relative;
}

.wrapper-chrome {
  position: relative;
}

.annotation-chrome {
  position: absolute;
  z-index: 1;

  overflow: hidden;
}

.labels-top-chrome {
  position: relative;
}

.annotation-container {
  position: absolute;
  width: 100%;
  height: 100%;

  z-index: 2;

  cursor: pointer;

  overflow: hidden;

  &:focus {
    --oe-annotation-color: var(--oe-annotation-selected-color);
    z-index: 1;
  }

  & > .bounding-box {
    position: absolute;
    border: var(--oe-annotation-weight) solid var(--oe-annotation-color);
  }
}

.bounding-box-label {
  width: fit-content;
  margin: 0;
  font-size: var(--oe-font-size);
  z-index: 2;

  position-visibility: no-overflow;

  &.style-edge {
    /*
      TODO: investigate why i have to use position: fixed here
      anchored elements need to be removed from the normal document flow, but I
      would have thought that absolute would do this and have better scoping.
    */
    position: fixed;
    /* position: absolute; */

    color: var(--oe-annotation-font-color);
    background-color: var(--oe-annotation-color);

    /*
      When the annotation labels are positioned at the top of the spectrogram
      if the label is too large to fit inside the annotations width, it can
      cause the label to overflow and not be visible.

      This is especially predominant when the user slots in their own content.
    */
    left: min(max(anchor(left), 0px), calc(100% - 5em));
    bottom: max(anchor(top), 1em);
    position-try: flip-block, flip-inline, --position-float-top;
  }

  &.style-spectrogram-top {
    position: absolute;
    bottom: 0px;

    rotate: -20deg;
    transform-origin: bottom left;
  }

  &.style-hidden {
    display: none;
  }
}

@position-try --position-float-top {
  top: 0px;
  bottom: initial;
}
