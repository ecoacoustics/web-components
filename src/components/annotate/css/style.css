@import url("./variables.css");

:host {
  position: relative;
  display: block;

  --oe-annotation-color: green;
  --oe-annotation-font-color: white;
  --oe-annotation-selected-color: lightgreen;
  --oe-annotation-weight: 1px;
}

#wrapper-element {
  position: relative;
}

.wrapper-chrome {
  position: relative;
}

.annotation-chrome {
  position: absolute;
  z-index: 1;

  overflow: hidden;
}

.labels-top-chrome {
  position: relative;
}

/*
  We have some really weird mix of positioning here because of the way that
  css position anchors work.
  We use css position anchors for the "edge" style labels.

  Some basic rules:
  - Elements positioned with CSS anchor MUST be removed from the normal document
    flow. Meaning that the labels MUST be position absolute, or fixed.
  - The element that the anchored element is attached to must be positioned
    relative if the anchored element is absolute.
  - If the anchored element is fixed, the label will positioned relative to the
    anchor host, but its overflow will be relative to the viewport.

  Therefore, our labels are positioned absolute, and the bounding box that the
  labels are attached to are positioned relative.

  However, because we want to overlay the annotation bounding boxes on top of
  the spectrogram, we cannot have the annotation bounding boxes in the document
  flow, or else other chrome surface overlays would be effected by the box
  size of the annotations.

  So that the annotations are removed from flow and can overlay on top of the
  spectrogram, we have a surface container that is removed from flow using
  position absolute that contains all of the annotations.
*/
.annotations-surface {
  & > aside.annotation-container {
    position: relative;

    z-index: 2;

    cursor: pointer;

    &:focus {
      --oe-annotation-color: var(--oe-annotation-selected-color);
      z-index: 1;
    }

    & > .bounding-box {
      position: absolute;
      border: var(--oe-annotation-weight) solid var(--oe-annotation-color);
    }
  }
}

.bounding-box-label {
  width: fit-content;
  margin: 0;
  font-size: var(--oe-font-size);
  z-index: 2;

  /*
    When rendering the labels on an angle in spectrogram-top, the text can
    undergo very heavy anti aliasing which can make it difficult to read.

    To fix this, I have applied a bunch of text rendering properties
    to ask the browser engine to not compromise the quality of content.

    While it is most impactful on the spectrogram-top style, I have applied it
    to edge styling as well in case the user wants to either:
    - Slot rotated content into the annotation tag
    - Rotate the spectrogram itself (for some reason)
  */
  text-rendering: optimizeLegibility;

  position-visibility: no-overflow;

  &.style-edge {
    position: absolute;

    color: var(--oe-annotation-font-color);
    background-color: var(--oe-annotation-color);

    /*
      When the annotation labels are positioned at the top of the spectrogram
      if the label is too large to fit inside the annotations width, it can
      cause the label to overflow and not be visible.

      This is especially predominant when the user slots in their own content.
    */
    left: min(max(anchor(left), 0px), calc(100% - 5em));
    bottom: max(anchor(top), 1em);
    position-try: flip-block, flip-inline, --position-float-top;
  }

  &.style-spectrogram-top {
    position: absolute;
    bottom: 0px;

    rotate: -20deg;
    transform-origin: bottom left;
  }

  &.style-hidden {
    display: none;
  }
}

@position-try --position-float-top {
  top: 0px;
  bottom: initial;
}
