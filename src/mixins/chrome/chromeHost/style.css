:host {
  display: block;
}

#chrome-wrapper {
  display: grid;

  grid-template-areas:
    ".    top     ."
    "left overlay right"
    ".    bottom  .";
  grid-template-columns: min-content auto min-content;
  grid-template-rows: min-content auto min-content;

  height: 100%;
}

.chrome {
  position: relative;

  &.chrome-edge {
    position: relative;
    height: fit-content;
    width: fit-content;
  }

  &.chrome-top {
    grid-area: 1 / 2;
  }

  &.chrome-bottom {
    grid-area: 3 / 2;
  }

  &.chrome-left {
    grid-area: 2 / 1;
  }

  &.chrome-right {
    grid-area: 2 / 3;
  }

  /*
    By default, css grid cells will have a fixed size determined by the grid
    template.
  */
  &.chrome-left,
  &.chrome-right {
    display: flex;

    /*
      I typically try to avoid overflow rendering. However, I use overflow
      rendering here because we want the chrome to be in flow and contribute its
      width to the chrome left and right cells.

      However, we do not want the chrome to contribute to the height. This is
      because we do not want the chrome to stop the spectrogram shrinking in
      height.
      An example can be seen in the axes component where if the y-axis
      contributed height to the chrome host, the spectrogram would not be able
      to shrink in height.

      Ideally this would be 0px, but Chrome has an "optimization" where it will
      not render 0px elements, even if overflow is set to visible.
      Therefore, we set the height to 1px. So that the chrome will render the
      child elements, but have very little impact on the height of the surface
      height.
      Using fractional pixel units (e.g. 0.1px) works, but introduces a
      maintainable burden if Chrome changes how it rounds fractional pixels.
      E.g. at the time of writing, Chrome rounds 0.1px to 0px, but this could
      change in the future.
    */
    height: 1px;
  }

  &.chrome-top,
  &.chrome-bottom {
    display: flex;
    flex-direction: column;

    /*
      Inversely to the left and right chrome, we want the top and bottom chrome
      to contribute to the height of the grid cell, but not the width.
    */
    width: 1px;
  }
}

.surface {
  display: flex;

  position: relative;
  grid-area: 2 / 2;
  max-width: 100%;
  overflow: visible;

  & > .chrome-overlay {
    position: absolute;
    inset: 0;
    width: 100%;
    height: 100%;

    z-index: 1;
  }

  & > .host-template {
    display: contents;
  }
}
